version: 2.1

orbs:
  win: circleci/windows@2.2.0

environment:
  PIP_PROGRESS_BAR: off

jobs:
  test-linux:
    parameters:
      python-version:
        type: string

    docker:
      - image: circleci/python:<< parameters.python-version >>

    steps:
      - checkout

      - restore_cache: &restore-cache-env
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: &create-virtualenv
          name: Create virtual environment
          command: |
            python -m venv env

      - run: &install-requirements
          name: Install requirements
          command: |
            . env/bin/activate
            pip install -U pip setuptools
            pip install -r requirements.txt -r tests/requirements.txt
            pip install dwave-inspectorapp --extra-index=https://pypi.dwavesys.com/simple
            pip install wheel twine

      - save_cache: &save-cache-env
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "tests/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - env

      - run: &build-package
          name: Build package
          command: env/bin/python setup.py sdist bdist_wheel

      - store_artifacts:
          path: dist

      - when:
          condition:
            matches:
              pattern: "^3\\.9.*$"    # can't do "^3\\.9" only due to (likely) circleci regex matching bug
              value: << parameters.python-version >>
          steps:
            - persist_to_workspace:
                root: dist
                paths: .

      - run: &install-package
          name: Install package
          command: env/bin/pip install .

      - run: &run-python-tests
          name: Run python tests
          command: env/bin/coverage run -m unittest discover

      - run: &upload-python-code-coverage
          name: Upload code coverage
          command: |
            . env/bin/activate
            codecov   # calls `coverage xml`, so we must activate venv

  test-macos:
    parameters:
      python-version:
        type: string
      xcode:
        type: string
        default: "12.3.0"

    macos:
      xcode: << parameters.xcode >>

    steps:
      - checkout

      # install `python-version` and cache it
      - run: &brew-install-pyenv
          name: Install pyenv
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install pyenv
            echo 'eval "$(pyenv init --path)"' >> ~/.bash_profile
            echo 'eval "$(pyenv init -)"' >> ~/.bash_profile

      - restore_cache: &restore-cache-pyenv
          keys:
            - v1-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-<< parameters.xcode >>

      - run: &pyenv-install-python
          name: Install python
          command: pyenv install << parameters.python-version >> -s

      - run: &pyenv-set-system-python
          name: Set system python
          command: |
            pyenv global << parameters.python-version >>

      - save_cache: &save-cache-pyenv
          key: v1-pyenv-{{ .Environment.CIRCLE_JOB }}-xcode-<< parameters.xcode >>
          paths:
            - ~/.pyenv

      # install dependencies and cache them
      - restore_cache: *restore-cache-env

      - run: *create-virtualenv

      - run: *install-requirements

      - save_cache: *save-cache-env

      - run: *install-package

      - run: *run-python-tests

  test-windows:
    parameters:
      python-version:
        type: string

    executor:
      name: win/default

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-nuget-python-<< parameters.python-version >>-{{ .Environment.CIRCLE_JOB }}

      - run:
          name: Install python and create virtualenv
          command: |
            nuget install python -Version << parameters.python-version >>
            python.<< parameters.python-version >>\tools\python -m venv env

      - save_cache:
          key: v1-nuget-python-<< parameters.python-version >>-{{ .Environment.CIRCLE_JOB }}
          paths:
            - python.<< parameters.python-version >>

      - run:
          name: Install requirements
          command: |
            env\Scripts\activate.ps1
            pip install -r requirements.txt -r tests\requirements.txt
            pip install dwave-inspectorapp --extra-index=https://pypi.dwavesys.com/simple

      - run:
          name: Install package
          command: |
            env\Scripts\activate.ps1
            python setup.py install

      - run:
          name: Run tests
          command: |
            env\Scripts\activate.ps1
            coverage run -m unittest discover

  test-docs:
    docker:
      - image: circleci/python:3.9

    steps:
      - checkout

      - restore_cache: &restore-cache-docs
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "docs/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}

      - run: *create-virtualenv

      - run: &install-requirements-docs
          name: Install requirements
          command: |
            . env/bin/activate
            pip install -U pip setuptools
            pip install -r requirements.txt -r docs/requirements.txt
            pip install dwave-inspectorapp --extra-index=https://pypi.dwavesys.com/simple

      - save_cache: &save-cache-docs
          key: v1-dependencies-{{ checksum "requirements.txt" }}-{{ checksum "docs/requirements.txt" }}-{{ .Environment.CIRCLE_JOB }}
          paths:
            - env

      - run: *install-package

      - run: &build-docs
          name: Build docs
          command: |
            . env/bin/activate
            make -C docs/ html

      - store_artifacts:
          path: ./docs/build/html

      - run: &run-doctest
          name: doctest
          command: |
            . env/bin/activate
            make -C docs/ doctest

      - run: &run-linkcheck
          name: linkcheck
          command: |
            . env/bin/activate
            make -C docs/ linkcheck

  pypi-deploy:
    docker:
      - image: circleci/python:3.9

    steps:
      - attach_workspace:
          at: dist

      - run:
          name: Deploy sdist and wheels to PyPI
          command: |
            python -m venv env
            . env/bin/activate
            pip install twine
            twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD --skip-existing ./dist/*

workflows:
  test-deploy:
    jobs:
      - test-linux:
          matrix:
            parameters:
              python-version: &python-versions ["3.6.8", "3.7.9", "3.8.9", "3.9.4"]
          filters: &always-run  # run on `tags` in addition to `branches` default (deploy dep)
            tags:
              only: /.*/

      - test-macos:
          matrix:
            parameters:
              python-version: *python-versions
          filters:
            <<: *always-run

      - test-windows:
          matrix:
            parameters:
              python-version: *python-versions
          filters:
            <<: *always-run

      - test-docs:
          filters:
            <<: *always-run

      - pypi-deploy:
          requires:
            - test-linux
            - test-macos
            - test-windows
          filters:
            tags:
              only: /^[0-9]+(\.[0-9]+)*((\.dev|rc)([0-9]+)?)?$/
            branches:
              ignore: /.*/
